{"version":3,"file":"includes/js/cbdebugger.c04a0808b6c2c1442a13.js","mappings":"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","sources":["webpack:///./resources/assets/js/components/ModulesPanel.js","webpack:///./resources/assets/js/components/RequestTrackerPanel.js","webpack:///./resources/assets/js/cbdebugger.js"],"sourcesContent":["export default ( isExpanded ) => {\n\treturn {\n\t\tpanelOpen    : isExpanded,\n\t\tisLoading    : false,\n\t\ttargetAction : \"\",\n\t\treloadModule( module ){\n\t\t\tthis.targetAction = \"reload-\" + module;\n\t\t\tthis.isLoading = true;\n\t\t\tfetch( `${this.appUrl}cbDebugger/reloadModule/module/${module}` )\n\t\t\t\t.then( response => response.json() )\n\t\t\t\t.then( data => {\n\t\t\t\t\tif ( data.error ){\n\t\t\t\t\t\talert( data.messages.toString() );\n\t\t\t\t\t} else {\n\t\t\t\t\t\talert( module + \" reloaded!\" );\n\t\t\t\t\t}\n\t\t\t\t\tthis.targetAction = \"\";\n\t\t\t\t\tthis.isLoading = false;\n\t\t\t\t} );\n\t\t},\n\t\tunloadModule( module ){\n\t\t\tthis.targetAction = \"unload-\" + module;\n\t\t\tthis.isLoading = true;\n\t\t\tfetch( `${this.appUrl}cbDebugger/unloadModule/module/${module}` )\n\t\t\t\t.then( response => response.json() )\n\t\t\t\t.then( data => {\n\t\t\t\t\tif ( data.error ){\n\t\t\t\t\t\talert( data.messages.toString() );\n\t\t\t\t\t} else {\n\t\t\t\t\t\talert( module + \" unloaded!\" );\n\t\t\t\t\t}\n\t\t\t\t\tthis.targetAction = \"\";\n\t\t\t\t\tthis.isLoading = false;\n\t\t\t\t\tthis.$refs[ \"module-row-\" + module ].remove();\n\t\t\t\t} );\n\t\t}\n\t};\n};\n","export default ( isExpanded, refreshFrequency, hasReinitPassword, isVisualizer ) => {\n\treturn {\n\t\tpanelOpen           : isExpanded,\n\t\trefreshFrequency    : refreshFrequency,\n\t\tusingReinitPassword : hasReinitPassword,\n\t\tisVisualizer        : isVisualizer,\n\t\tcurrentProfileId    : \"\",\n\t\trefreshMonitor      : null,\n\n\t\treinitFramework(){\n\t\t\tthis.$refs.reinitLoader.classList.add( \"cbd-spinner\" );\n\t\t\tlet reinitPass = this.usingReinitPassword ? prompt( \"Reinit Password?\" ) : \"1\";\n\t\t\tfetch( `${this.appUrl}?fwreinit=${reinitPass}`, { headers: { \"x-Requested-With\": \"XMLHttpRequest\" } } )\n\t\t\t\t.then( response => {\n\t\t\t\t\tif ( response.ok ){\n\t\t\t\t\t\talert( \"Framework Reinitted!\" );\n\t\t\t\t\t\tthis.refreshProfilers();\n\t\t\t\t\t} else {\n\t\t\t\t\t\talert( \"HTTP Call Error\" + response.status );\n\t\t\t\t\t}\n\t\t\t\t\tthis.$refs.reinitLoader.classList.remove( \"cbd-spinner\" );\n\t\t\t\t} );\n\t\t},\n\n\t\tloadProfilerReport( id ){\n\t\t\tthis.stopDebuggerMonitor();\n\t\t\tfetch( `${this.appUrl}cbDebugger/renderProfilerReport`, {\n\t\t\t\tmethod  : \"POST\",\n\t\t\t\theaders : { \"x-Requested-With\": \"XMLHttpRequest\" },\n\t\t\t\tbody    : JSON.stringify( {\n\t\t\t\t\tid           : id,\n\t\t\t\t\tisVisualizer : this.isVisualizer\n\t\t\t\t} )\n\t\t\t} )\n\t\t\t\t.then( response => response.text() )\n\t\t\t\t.then( html => {\n\t\t\t\t\thistory.pushState( { profileId: id }, null, \"#\" + id );\n\t\t\t\t\tthis.$refs[ \"cbd-profilers\" ].innerHTML = html;\n\t\t\t\t\tcoldboxDebugger.scrollTo( \"cbd-request-tracker\" );\n\t\t\t\t} );\n\t\t},\n\n\t\tclearState(){\n\t\t\thistory.pushState( {}, null, \"#\" );\n\t\t\tthis.currentProfileId = \"\";\n\t\t},\n\n\t\trefreshProfilers( sortBy = '', sortOrder = '' ){\n\t\t\tthis.$refs.refreshLoader.classList.add( \"cbd-spinner\" );\n\t\t\tfetch(\n\t\t\t\t`${this.appUrl}cbDebugger/renderProfilers?sortBy=${sortBy}&sortOrder=${sortOrder}`,\n\t\t\t\t{ headers: { \"x-Requested-With\": \"XMLHttpRequest\" } }\n\t\t\t)\n\t\t\t\t.then( response => response.text() )\n\t\t\t\t.then( html => {\n\t\t\t\t\tthis.clearState();\n\t\t\t\t\tthis.$refs[ \"cbd-profilers\" ].innerHTML = html;\n\t\t\t\t\tthis.$refs.refreshLoader.classList.remove( \"cbd-spinner\" );\n\t\t\t\t} );\n\t\t},\n\n\t\tclearProfilers(){\n\t\t\tthis.$refs.clearLoader.classList.add( \"cbd-spinner\" );\n\t\t\tfetch( `${this.appUrl}cbDebugger/clearProfilers`, { headers: { \"x-Requested-With\": \"XMLHttpRequest\" } } )\n\t\t\t\t.then( response => response.json() )\n\t\t\t\t.then( data => {\n\t\t\t\t\tthis.clearState();\n\t\t\t\t\tif ( data.error ){\n\t\t\t\t\t\talert( data.messages.toString() );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.refreshProfilers();\n\t\t\t\t\t}\n\t\t\t\t\tthis.$refs.clearLoader.classList.remove( \"cbd-spinner\" );\n\t\t\t\t} );\n\t\t},\n\n\t\tstopDebuggerMonitor(){\n\t\t\t// stop only if loaded\n\t\t\tif ( this.refreshMonitor != null ){\n\t\t\t\tclearInterval( this.refreshMonitor );\n\t\t\t\tthis.refreshFrequency = 0;\n\t\t\t\tconsole.info( \"Stopped ColdBox Debugger Profiler Refresh\" );\n\t\t\t}\n\t\t},\n\n\t\tstartDebuggerMonitor( frequency ){\n\t\t\t// Ensure monitor is stopped just in case we are switching frequencies\n\t\t\tthis.stopDebuggerMonitor();\n\t\t\tthis.refreshFrequency = frequency;\n\t\t\tif ( this.refreshFrequency == 0 ){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.refreshMonitor = setInterval( () => this.refreshProfilers(), this.refreshFrequency * 1000 );\n\t\t\tconsole.info( \"Started ColdBox Debugger Profiler Refresh using \" + this.refreshFrequency + \" seconds\" );\n\t\t},\n\n\t\tinit(){\n\t\t\twindow.addEventListener( \"popstate\", e => {\n\t\t\t\tif ( e.state && e.state.profileId ){\n\t\t\t\t\tthis.currentProfileId = e.state.profileId;\n\t\t\t\t\tthis.loadProfilerReport( e.state.profileId );\n\t\t\t\t} else {\n\t\t\t\t\tthis.refreshProfilers();\n\t\t\t\t}\n\t\t\t} );\n\t\t\t// Detect if an incoming profile id hash is detected\n\t\t\tif ( location.hash ){\n\t\t\t\tthis.currentProfileId = location.hash.substr( 1 );\n\t\t\t\tthis.loadProfilerReport( this.currentProfileId );\n\t\t\t}\n\t\t}\n\t};\n};\n","import cbAlpine from \"alpinejs\";\n\n// Load Custom Components\nimport ModulesPanel from \"./components/ModulesPanel\";\nimport RequestTrackerPanel from \"./components/RequestTrackerPanel\";\n\n// Init the coldbox debugger module\nwindow.coldboxDebugger = ( () => {\n\n\t/**\n\t * Listen to alpine startup to load cbDebugger components\n\t */\n\tdocument.addEventListener('alpine:init', () => {\n\t\t// Register Components so our prefixed alpine version can read it.\n\t\twindow.Alpine.data( \"cbdModulesPanel\", ModulesPanel );\n\t\twindow.Alpine.data( \"cbdRequestTrackerPanel\", RequestTrackerPanel );\n\t\t//console.log( \"Registering cbDebugger Alpine Components!\" );\n\t});\n\n\t/**\n\t * Listen to DOM to see if we load our Alpine or use a version of Alpine\n\t */\n\twindow.addEventListener( \"load\", ( event ) => {\n\t\t// Verify if alpine is already loaded in the window\n\t\tif( !window.hasOwnProperty( \"Alpine\" ) ){\n\t\t\twindow.Alpine = cbAlpine;\n\t\t\t// Startup your engines!!!!!!!!\n\t\t\twindow.Alpine.start();\n\t\t\t//console.log( \"Alpine not loaded, loading it!\" );\n\t\t} else {\n\t\t\tconsole.log( \"Alpine already loaded, cbDebugger will use it!\" );\n\t\t}\n\t\tconsole.log( \"ColdBox Debugger Loaded!\" );\n\t} );\n\n\treturn {\n\t\t/**\n\t\t * Copy a div's code to the clipboard\n\t\t *\n\t\t * @param {*} id The id of the element's content to copy to the clipboard\n\t\t */\n\t\tcopyToClipboard : function( id ) {\n\t\t\tvar elm = document.getElementById( id );\n\t\t\t// for Internet Explorer\n\t\t\tif ( document.body.createTextRange ) {\n\t\t\t\tvar range = document.body.createTextRange();\n\t\t\t\trange.moveToElementText( elm );\n\t\t\t\trange.select();\n\t\t\t\tdocument.execCommand( \"Copy\" );\n\t\t\t} else if ( window.getSelection ) {\n\t\t\t\t// other browsers\n\t\t\t\tvar selection = window.getSelection();\n\t\t\t\tvar range = document.createRange();\n\t\t\t\trange.selectNodeContents( elm );\n\t\t\t\tselection.removeAllRanges();\n\t\t\t\tselection.addRange( range );\n\t\t\t\tdocument.execCommand( \"Copy\" );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Smoot scrolling baby\n\t\t * @param {*} id Optional dom id to scroll to else to the top.\n\t\t */\n\t\tscrollTo : function( id ){\n\t\t\tlet top = id == undefined ? 0 : document.getElementById( id ).offsetTop - 10;\n\t\t\twindow.scroll( {\n\t\t\t\ttop      : top,\n\t\t\t\tbehavior : \"smooth\"\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t* Open a new window\n\t\t*\n\t\t* @param {*} mypage the target page\n\t\t* @param {*} myname the target name\n\t\t* @param {*} w width\n\t\t* @param {*} h height\n\t\t* @param {*} features features to add\n\t\t*/\n\t\topenWindow : function( mypage, myname, w, h, features ) {\n\t\t   let winl = screen.width ? ( screen.width - w ) / 2 : 0;\n\t\t   let wint = screen.width ? ( screen.height - h ) / 2 : 0;\n\t\t   if ( winl < 0 ) winl = 0;\n\t\t   if ( wint < 0 ) wint = 0;\n\t\t   let win = window.open(\n\t\t\t   mypage,\n\t\t\t   myname,\n\t\t\t   `height=${h},width=${w},top=${wint},left=${winl}+${features}`\n\t\t   );\n\t\t   win.window.focus();\n\t   }\n\t};\n} )();\n"],"names":["isExpanded","panelOpen","isLoading","targetAction","reloadModule","module","this","fetch","appUrl","then","response","json","data","error","alert","messages","toString","unloadModule","$refs","remove","refreshFrequency","hasReinitPassword","isVisualizer","usingReinitPassword","currentProfileId","refreshMonitor","reinitFramework","reinitLoader","classList","add","reinitPass","prompt","headers","ok","refreshProfilers","status","loadProfilerReport","id","stopDebuggerMonitor","method","body","JSON","stringify","text","html","history","pushState","profileId","innerHTML","coldboxDebugger","scrollTo","clearState","sortBy","sortOrder","refreshLoader","clearProfilers","clearLoader","clearInterval","console","info","startDebuggerMonitor","frequency","setInterval","init","window","addEventListener","e","state","location","hash","substr","document","Alpine","ModulesPanel","RequestTrackerPanel","event","hasOwnProperty","log","cbAlpine","start","copyToClipboard","elm","getElementById","createTextRange","range","moveToElementText","select","execCommand","getSelection","selection","createRange","selectNodeContents","removeAllRanges","addRange","top","undefined","offsetTop","scroll","behavior","openWindow","mypage","myname","w","h","features","winl","screen","width","wint","height","open","focus"],"sourceRoot":""}